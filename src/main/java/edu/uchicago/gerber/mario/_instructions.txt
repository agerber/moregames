
      ___            ___        /  /\         /  /\         /  /\    
     /  /\          /__/\      /  /::\       /  /::\       /  /::\   
    /  /:/          \__\:\    /  /:/\:\     /  /:/\:\     /  /:/\:\  
   /  /:/           /  /::\  /  /:/  \:\   /  /::\ \:\   /  /:/  \:\ 
  /__/:/  ___    __/  /:/\/ /__/:/ \__\:| /__/:/\:\ \:\ /__/:/ \__\:\
  |  |:| /  /\  /__/\/:/~~  \  \:\ /  /:/ \  \:\ \:\_\/ \  \:\ /  /:/
  |  |:|/  /:/  \  \::/      \  \:\  /:/   \  \:\ \:\    \  \:\  /:/ 
  |__|:|__/:/    \  \:\       \  \:\/:/     \  \:\_\/     \  \:\/:/  
   \__\::::/      \__\/        \__\::/       \  \:\        \  \::/   
       ~~~~                        ~~         \__\/         \__\/    
      ___           ___           ___           ___     
     /  /\         /  /\         /  /\         /  /\    
    /  /::\       /  /::\       /  /::|       /  /::\   
   /  /:/\:\     /  /:/\:\     /  /:|:|      /  /:/\:\  
  /  /:/  \:\   /  /::\ \:\   /  /:/|:|__   /  /::\ \:\ 
 /__/:/_\_ \:\ /__/:/\:\_\:\ /__/:/_|::::\ /__/:/\:\ \:\
 \  \:\__/\_\/ \__\/  \:\/:/ \__\/  /~~/:/ \  \:\ \:\_\/
  \  \:\ \:\        \__\::/        /  /:/   \  \:\ \:\  
   \  \:\/:/        /  /:/        /  /:/     \  \:\_\/  
    \  \::/        /__/:/        /__/:/       \  \:\    
     \__\/         \__\/         \__\/         \__\/    




Much thanks to John Moison and Mike Visilou for providing code.

There are two kinds of graphics in gaming, vector and raster. Vector sprites are composed a relatively small set of
vertices. The computer then uses the verticies to draw a shape, typically a polygon, and renders these sprites with a stroke and fill operation.
The advantage of vector graphics is that they typically (depending on the number of vertices) render much faster than raster, and they
scale infinitely with no loss of fidelity or pixelation. Animation is also much easier with vector sprites, however vector graphics don't
provide as much detail as raster.

Raster sprites use raster files such as jpeg and png. Notwithstanding any compression, a raster graphic is effectly a two-dimensional array
of pixels. The advantage of raster is that you are no longer limited to stroke-and-fill operations; any jpeg or png you can find online or create will
suffice as a sprite and this means you can create a very detailed and rich graphical environment. However, the richness of raster comes at a cost.
The rendering time for a raster sprite is almost always longer than a vector sprite. Raster animations, aside from simply moving or rotating the sprite, involve
a series of individual files to produce a flipcard effect which is something I suggest you use sparingly or not at all.

Asteroids is a purely vector-based game, Mario is purely raster-based, and Sinistar is a hybrid. Chose your code-base depending on your own
 game's graphics requirements.

The minimum requirements for your final project using the Asteroids code-base have not changed. However, ff you choose to extend mario or sinistar as your base,
both of which are forks of the asteroids game engine, the only requirement is that the resultant source be at least 50% your own.


Some interesting things to consider when using Mario as base:

Sprite.java has been refactored and much simplified to use raster graphics.
Sprites no longer have circumscribing circles and collision detection is based on rectangles centers', widths', and heights'. This architecture
lends itself well to games that exist in a grid, such as frogger, centipede, space invaders, pacman, and so on.


Some interesting things to consider when using Sinistar as a base:

The Falcon no longer travels, but rather the world revolves around the falcon which remains in the center and whose view portal
is shown in a minimap.
Foes and crystals (power-ups) can easily track the faclon's position which always stays in the center of the view portal. This architecture lends
itself well to to games which allow users to explore a world.









